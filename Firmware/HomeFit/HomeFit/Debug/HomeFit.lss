
HomeFit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000344  000003d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000344  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000072  0080010c  0080010c  000003e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000414  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d2e  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000911  00000000  00000000  00001252  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006d7  00000000  00000000  00001b63  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ec  00000000  00000000  0000223c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000522  00000000  00000000  00002428  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000058b  00000000  00000000  0000294a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002ed5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e4       	ldi	r30, 0x44	; 68
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 37       	cpi	r26, 0x7E	; 126
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9b 01 	call	0x336	; 0x336 <main>
  9e:	0c 94 a0 01 	jmp	0x340	; 0x340 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ApplicationMain>:
uint8_t pin2_cnt = 0, pin4_cnt = 0;
uint8_t ex_cnt = 0;

void ApplicationMain(void)
{
	PORTB |= (1 << PORTB5);
  a6:	2d 9a       	sbi	0x05, 5	; 5
	
	if(pin2_flg == 1 && pin4_flg == 0)
  a8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <pin2_flg>
  ac:	81 30       	cpi	r24, 0x01	; 1
  ae:	41 f4       	brne	.+16     	; 0xc0 <ApplicationMain+0x1a>
  b0:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <pin4_flg>
  b4:	81 11       	cpse	r24, r1
  b6:	04 c0       	rjmp	.+8      	; 0xc0 <ApplicationMain+0x1a>
	{
		state = FORWARD;
  b8:	8b e0       	ldi	r24, 0x0B	; 11
  ba:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <state>
  be:	10 c0       	rjmp	.+32     	; 0xe0 <ApplicationMain+0x3a>
	}
	else if(pin2_flg == 0 && pin4_flg == 1)
  c0:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <pin2_flg>
  c4:	81 11       	cpse	r24, r1
  c6:	08 c0       	rjmp	.+16     	; 0xd8 <ApplicationMain+0x32>
  c8:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <pin4_flg>
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	21 f4       	brne	.+8      	; 0xd8 <ApplicationMain+0x32>
	{
		state = REVERSE;
  d0:	86 e1       	ldi	r24, 0x16	; 22
  d2:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <state>
  d6:	19 c0       	rjmp	.+50     	; 0x10a <ApplicationMain+0x64>
	}
	
	if(state == FORWARD)
  d8:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <state>
  dc:	8b 30       	cpi	r24, 0x0B	; 11
  de:	99 f4       	brne	.+38     	; 0x106 <ApplicationMain+0x60>
	{
		if(pin2_forward_flg == 1)
  e0:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <pin2_forward_flg>
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	41 f5       	brne	.+80     	; 0x138 <ApplicationMain+0x92>
		{
			pin2_forward_flg = 0;
  e8:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <pin2_forward_flg>
			pin2_cnt++;
  ec:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pin2_cnt>
  f0:	8f 5f       	subi	r24, 0xFF	; 255
  f2:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <pin2_cnt>
			if(pin2_cnt > 5)
  f6:	86 30       	cpi	r24, 0x06	; 6
  f8:	f8 f0       	brcs	.+62     	; 0x138 <ApplicationMain+0x92>
			{
// 				uint8_t str[10] = "FORWARD\n";
// 				USART_Transmit_str(str, _ASCII);
				forward_state = 1;
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <forward_state>
				pin2_flg = 0;
 100:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <pin2_flg>
 104:	1d c0       	rjmp	.+58     	; 0x140 <ApplicationMain+0x9a>
			}
		}
	}
	else if(state == REVERSE)
 106:	86 31       	cpi	r24, 0x16	; 22
 108:	b9 f4       	brne	.+46     	; 0x138 <ApplicationMain+0x92>
	{
		if(pin4_reverse_flg == 1)
 10a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <pin4_reverse_flg>
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	99 f4       	brne	.+38     	; 0x138 <ApplicationMain+0x92>
		{
			pin4_reverse_flg = 0;
 112:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <pin4_reverse_flg>
			pin4_cnt++;
 116:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <pin4_cnt>
 11a:	8f 5f       	subi	r24, 0xFF	; 255
 11c:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <pin4_cnt>
			if(pin4_cnt > 5)
 120:	86 30       	cpi	r24, 0x06	; 6
 122:	50 f0       	brcs	.+20     	; 0x138 <ApplicationMain+0x92>
			{
// 				uint8_t str[10] = "REVERSE\n";
// 				USART_Transmit_str(str, _ASCII);
				reverse_state = 1;
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <reverse_state>
				pin4_flg = 0;
 12a:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <pin4_flg>
			}
		}
	}
	
	if(forward_state == 1 && reverse_state == 1)
 12e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <forward_state>
 132:	81 30       	cpi	r24, 0x01	; 1
 134:	b1 f4       	brne	.+44     	; 0x162 <ApplicationMain+0xbc>
 136:	08 c0       	rjmp	.+16     	; 0x148 <ApplicationMain+0xa2>
 138:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <forward_state>
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	89 f4       	brne	.+34     	; 0x162 <ApplicationMain+0xbc>
 140:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <reverse_state>
 144:	81 30       	cpi	r24, 0x01	; 1
 146:	69 f4       	brne	.+26     	; 0x162 <ApplicationMain+0xbc>
	{
		ex_cnt++;
 148:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 14c:	8f 5f       	subi	r24, 0xFF	; 255
 14e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
		
// 		USART_Transmit_char(0xEA);
// 		USART_Transmit_char(ex_cnt);
// 		USART_Transmit_char(0x00);
// 		USART_Transmit_char(0x5A);
		forward_state = 0;
 152:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <forward_state>
		reverse_state = 0;
 156:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <reverse_state>
		pin2_cnt = 0;
 15a:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <pin2_cnt>
		pin4_cnt = 0;
 15e:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <pin4_cnt>
 162:	08 95       	ret

00000164 <AppInit>:
	}
}

void AppInit(void)
{
	USART_Init(BAUD_9600);			// USART 9600 baudrate 설정
 164:	87 e6       	ldi	r24, 0x67	; 103
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 1a 01 	call	0x234	; 0x234 <USART_Init>
	PCINT_init();
 16c:	0e 94 c1 00 	call	0x182	; 0x182 <PCINT_init>
	DDRB = (1 << PORTB5);			// 확인용 LED
 170:	80 e2       	ldi	r24, 0x20	; 32
 172:	84 b9       	out	0x04, r24	; 4
	sei();
 174:	78 94       	sei
	USART_Transmit_str("START\n", _ASCII);
 176:	6a e0       	ldi	r22, 0x0A	; 10
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	0e 94 49 01 	call	0x292	; 0x292 <USART_Transmit_str>
 180:	08 95       	ret

00000182 <PCINT_init>:
volatile uint8_t pin2_forward_flg = 0, pin4_reverse_flg = 0;
uint8_t state = 0;

void PCINT_init(void)
{
	DDRB &= ~((1 << PORTB0) | (1 << PORTB1) | (1 << PORTB2) | (1 << PORTB3));
 182:	84 b1       	in	r24, 0x04	; 4
 184:	80 7f       	andi	r24, 0xF0	; 240
 186:	84 b9       	out	0x04, r24	; 4
	PCICR = (1 << PCIE0);
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	PCMSK0 = (1 << PCINT0) | (1 << PCINT1) | (1 << PCINT2) | (1 << PCINT3);
 18e:	8f e0       	ldi	r24, 0x0F	; 15
 190:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
 194:	08 95       	ret

00000196 <__vector_3>:
}

ISR(PCINT0_vect)
{
 196:	1f 92       	push	r1
 198:	0f 92       	push	r0
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	0f 92       	push	r0
 19e:	11 24       	eor	r1, r1
 1a0:	2f 93       	push	r18
 1a2:	3f 93       	push	r19
 1a4:	4f 93       	push	r20
 1a6:	5f 93       	push	r21
 1a8:	6f 93       	push	r22
 1aa:	7f 93       	push	r23
 1ac:	8f 93       	push	r24
 1ae:	9f 93       	push	r25
 1b0:	af 93       	push	r26
 1b2:	bf 93       	push	r27
 1b4:	ef 93       	push	r30
 1b6:	ff 93       	push	r31
	uint8_t input_check = PINB & 0x0F;
 1b8:	83 b1       	in	r24, 0x03	; 3
	switch(input_check)
 1ba:	8f 70       	andi	r24, 0x0F	; 15
 1bc:	84 30       	cpi	r24, 0x04	; 4
 1be:	a9 f0       	breq	.+42     	; 0x1ea <__vector_3+0x54>
 1c0:	88 30       	cpi	r24, 0x08	; 8
 1c2:	21 f1       	breq	.+72     	; 0x20c <__vector_3+0x76>
 1c4:	82 30       	cpi	r24, 0x02	; 2
 1c6:	29 f5       	brne	.+74     	; 0x212 <__vector_3+0x7c>
	{
		case 0x01:
			break;
		case 0x02:
			if(state == FORWARD)
 1c8:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <state>
 1cc:	8b 30       	cpi	r24, 0x0B	; 11
 1ce:	21 f4       	brne	.+8      	; 0x1d8 <__vector_3+0x42>
			{
				pin2_forward_flg = 1;
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <pin2_forward_flg>
 1d6:	03 c0       	rjmp	.+6      	; 0x1de <__vector_3+0x48>
			}
			else
			{
				pin2_flg = 1;
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <pin2_flg>
			}
			USART_Transmit_str("2", _ASCII);
 1de:	6a e0       	ldi	r22, 0x0A	; 10
 1e0:	87 e0       	ldi	r24, 0x07	; 7
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	0e 94 49 01 	call	0x292	; 0x292 <USART_Transmit_str>
			break;
 1e8:	14 c0       	rjmp	.+40     	; 0x212 <__vector_3+0x7c>
		case 0x04:
			if(state == REVERSE)
 1ea:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <state>
 1ee:	86 31       	cpi	r24, 0x16	; 22
 1f0:	21 f4       	brne	.+8      	; 0x1fa <__vector_3+0x64>
			{
				pin4_reverse_flg = 1;
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <pin4_reverse_flg>
 1f8:	03 c0       	rjmp	.+6      	; 0x200 <__vector_3+0x6a>
			}
			else
			{
				pin4_flg = 1;
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <pin4_flg>
			}
			USART_Transmit_str("4", _ASCII);
 200:	6a e0       	ldi	r22, 0x0A	; 10
 202:	89 e0       	ldi	r24, 0x09	; 9
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	0e 94 49 01 	call	0x292	; 0x292 <USART_Transmit_str>
			break;		
 20a:	03 c0       	rjmp	.+6      	; 0x212 <__vector_3+0x7c>
		case 0x08:
			pin8_flg = 1;
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <pin8_flg>
			break;		
	}
 212:	ff 91       	pop	r31
 214:	ef 91       	pop	r30
 216:	bf 91       	pop	r27
 218:	af 91       	pop	r26
 21a:	9f 91       	pop	r25
 21c:	8f 91       	pop	r24
 21e:	7f 91       	pop	r23
 220:	6f 91       	pop	r22
 222:	5f 91       	pop	r21
 224:	4f 91       	pop	r20
 226:	3f 91       	pop	r19
 228:	2f 91       	pop	r18
 22a:	0f 90       	pop	r0
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	0f 90       	pop	r0
 230:	1f 90       	pop	r1
 232:	18 95       	reti

00000234 <USART_Init>:
			myString[i] = response;
			i++;
		}
	}
	myString[i] = 0;
}
 234:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 238:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 23c:	88 e9       	ldi	r24, 0x98	; 152
 23e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 242:	8e e0       	ldi	r24, 0x0E	; 14
 244:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 248:	08 95       	ret

0000024a <USART_Transmit_char>:
 24a:	e0 ec       	ldi	r30, 0xC0	; 192
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	90 81       	ld	r25, Z
 250:	95 ff       	sbrs	r25, 5
 252:	fd cf       	rjmp	.-6      	; 0x24e <USART_Transmit_char+0x4>
 254:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 258:	08 95       	ret

0000025a <nibbleToHexChar>:
 25a:	8a 30       	cpi	r24, 0x0A	; 10
 25c:	10 f4       	brcc	.+4      	; 0x262 <nibbleToHexChar+0x8>
 25e:	80 5d       	subi	r24, 0xD0	; 208
 260:	08 95       	ret
 262:	89 5c       	subi	r24, 0xC9	; 201
 264:	08 95       	ret

00000266 <translateChartoASCII>:
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	c8 2f       	mov	r28, r24
 26c:	82 95       	swap	r24
 26e:	8f 70       	andi	r24, 0x0F	; 15
 270:	0e 94 2d 01 	call	0x25a	; 0x25a <nibbleToHexChar>
 274:	d8 2f       	mov	r29, r24
 276:	8c 2f       	mov	r24, r28
 278:	8f 70       	andi	r24, 0x0F	; 15
 27a:	0e 94 2d 01 	call	0x25a	; 0x25a <nibbleToHexChar>
 27e:	c8 2f       	mov	r28, r24
 280:	8d 2f       	mov	r24, r29
 282:	0e 94 25 01 	call	0x24a	; 0x24a <USART_Transmit_char>
 286:	8c 2f       	mov	r24, r28
 288:	0e 94 25 01 	call	0x24a	; 0x24a <USART_Transmit_char>
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	08 95       	ret

00000292 <USART_Transmit_str>:
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
 296:	ec 01       	movw	r28, r24
 298:	6a 30       	cpi	r22, 0x0A	; 10
 29a:	51 f4       	brne	.+20     	; 0x2b0 <USART_Transmit_str+0x1e>
 29c:	88 81       	ld	r24, Y
 29e:	88 23       	and	r24, r24
 2a0:	91 f0       	breq	.+36     	; 0x2c6 <USART_Transmit_str+0x34>
 2a2:	21 96       	adiw	r28, 0x01	; 1
 2a4:	0e 94 25 01 	call	0x24a	; 0x24a <USART_Transmit_char>
 2a8:	89 91       	ld	r24, Y+
 2aa:	81 11       	cpse	r24, r1
 2ac:	fb cf       	rjmp	.-10     	; 0x2a4 <USART_Transmit_str+0x12>
 2ae:	0b c0       	rjmp	.+22     	; 0x2c6 <USART_Transmit_str+0x34>
 2b0:	6b 30       	cpi	r22, 0x0B	; 11
 2b2:	49 f4       	brne	.+18     	; 0x2c6 <USART_Transmit_str+0x34>
 2b4:	88 81       	ld	r24, Y
 2b6:	88 23       	and	r24, r24
 2b8:	31 f0       	breq	.+12     	; 0x2c6 <USART_Transmit_str+0x34>
 2ba:	21 96       	adiw	r28, 0x01	; 1
 2bc:	0e 94 33 01 	call	0x266	; 0x266 <translateChartoASCII>
 2c0:	89 91       	ld	r24, Y+
 2c2:	81 11       	cpse	r24, r1
 2c4:	fb cf       	rjmp	.-10     	; 0x2bc <USART_Transmit_str+0x2a>
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	08 95       	ret

000002cc <__vector_18>:
// 	while(!(UCSR0A & (1 << UDRE0)));
// 	UDR0 = data;
// }

ISR(USART_RX_vect)
{
 2cc:	1f 92       	push	r1
 2ce:	0f 92       	push	r0
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	0f 92       	push	r0
 2d4:	11 24       	eor	r1, r1
 2d6:	8f 93       	push	r24
 2d8:	9f 93       	push	r25
 2da:	af 93       	push	r26
 2dc:	bf 93       	push	r27
 2de:	ef 93       	push	r30
 2e0:	ff 93       	push	r31
	rx_data = UDR0;
 2e2:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2e6:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <rx_data>
	rx_buf[rx_cnt++] = rx_data;
 2ea:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <rx_cnt>
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	8e 0f       	add	r24, r30
 2f2:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <rx_cnt>
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	e7 5e       	subi	r30, 0xE7	; 231
 2fa:	fe 4f       	sbci	r31, 0xFE	; 254
 2fc:	90 83       	st	Z, r25
	if(rx_cnt == LENTH)
 2fe:	85 30       	cpi	r24, 0x05	; 5
 300:	79 f4       	brne	.+30     	; 0x320 <__vector_18+0x54>
	{
		memcpy(str, rx_buf, LENTH);
 302:	e9 e1       	ldi	r30, 0x19	; 25
 304:	f1 e0       	ldi	r31, 0x01	; 1
 306:	ac e4       	ldi	r26, 0x4C	; 76
 308:	b1 e0       	ldi	r27, 0x01	; 1
 30a:	01 90       	ld	r0, Z+
 30c:	0d 92       	st	X+, r0
 30e:	8a 95       	dec	r24
 310:	e1 f7       	brne	.-8      	; 0x30a <__vector_18+0x3e>
		str[LENTH] = 0;
 312:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <str+0x5>
		rx_cnt = 0;
 316:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <rx_cnt>
		rx_flag = 1;
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <rx_flag>
	}
 320:	ff 91       	pop	r31
 322:	ef 91       	pop	r30
 324:	bf 91       	pop	r27
 326:	af 91       	pop	r26
 328:	9f 91       	pop	r25
 32a:	8f 91       	pop	r24
 32c:	0f 90       	pop	r0
 32e:	0f be       	out	0x3f, r0	; 63
 330:	0f 90       	pop	r0
 332:	1f 90       	pop	r1
 334:	18 95       	reti

00000336 <main>:

#include "common.h"

int main(void)
{
	AppInit();
 336:	0e 94 b2 00 	call	0x164	; 0x164 <AppInit>
    while (1) 
    {
		ApplicationMain();
 33a:	0e 94 53 00 	call	0xa6	; 0xa6 <ApplicationMain>
 33e:	fd cf       	rjmp	.-6      	; 0x33a <main+0x4>

00000340 <_exit>:
 340:	f8 94       	cli

00000342 <__stop_program>:
 342:	ff cf       	rjmp	.-2      	; 0x342 <__stop_program>
