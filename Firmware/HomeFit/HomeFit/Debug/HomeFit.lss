
HomeFit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  00000526  000005ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000526  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007c  00800140  00800140  000005fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000062c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  0000066c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001118  00000000  00000000  0000075c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d2  00000000  00000000  00001874  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008f8  00000000  00000000  00002246  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000204  00000000  00000000  00002b40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005dd  00000000  00000000  00002d44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000749  00000000  00000000  00003321  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003a6a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e2       	ldi	r30, 0x26	; 38
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 34       	cpi	r26, 0x40	; 64
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e4       	ldi	r26, 0x40	; 64
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 3b       	cpi	r26, 0xBC	; 188
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8c 02 	call	0x518	; 0x518 <main>
  9e:	0c 94 91 02 	jmp	0x522	; 0x522 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <AppInit>:
	}
}

void AppInit(void)
{
	USART_Init(BAUD_38400);			// USART 9600 baudrate 설정
  a6:	89 e1       	ldi	r24, 0x19	; 25
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 08 02 	call	0x410	; 0x410 <USART_Init>
	PCINT_init();
  ae:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <PCINT_init>
	sei();
  b2:	78 94       	sei
	//bt_setup();
	USART_Transmit_str("START\n", _ASCII);
  b4:	6a e0       	ldi	r22, 0x0A	; 10
  b6:	82 e0       	ldi	r24, 0x02	; 2
  b8:	91 e0       	ldi	r25, 0x01	; 1
  ba:	0e 94 37 02 	call	0x46e	; 0x46e <USART_Transmit_str>
  be:	08 95       	ret

000000c0 <send_msg>:
	send_msg();
}

void send_msg(void)
{
	USART_Transmit_char(0xEA);		// 프로토콜 전송
  c0:	8a ee       	ldi	r24, 0xEA	; 234
  c2:	0e 94 13 02 	call	0x426	; 0x426 <USART_Transmit_char>
	USART_Transmit_char(count);
  c6:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <count>
  ca:	0e 94 13 02 	call	0x426	; 0x426 <USART_Transmit_char>
	USART_Transmit_char(pow_count);
  ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  d2:	0e 94 13 02 	call	0x426	; 0x426 <USART_Transmit_char>
	USART_Transmit_char(0x5A);	
  d6:	8a e5       	ldi	r24, 0x5A	; 90
  d8:	0e 94 13 02 	call	0x426	; 0x426 <USART_Transmit_char>
  dc:	08 95       	ret

000000de <all_mode_init>:
	USART_Transmit_str("START\n", _ASCII);
}

void all_mode_init(void)
{
	flag = _RESET;
  de:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <flag>
	count = _RESET;
  e2:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <count>
	ex_cnt = _RESET;
  e6:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <ex_cnt>
	direction = _RESET;
  ea:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <direction>
	before_dir = _RESET;
  ee:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <__data_end>
	pow_flag = _RESET;
  f2:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <pow_flag>
	pow_count = _RESET;
  f6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
	send_msg();
  fa:	0e 94 60 00 	call	0xc0	; 0xc0 <send_msg>
  fe:	08 95       	ret

00000100 <receive_msg>:
	USART_Transmit_char(0x5A);	
}

void receive_msg(void)
{
	if(rx_flag == _SET)
 100:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <rx_flag>
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	01 f5       	brne	.+64     	; 0x148 <receive_msg+0x48>
	{
		rx_flag = _RESET;
 108:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <rx_flag>
		if(str[0] == PT_HEADER && str[2] == PT_TAIL)
 10c:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <str>
 110:	8a 3e       	cpi	r24, 0xEA	; 234
 112:	21 f4       	brne	.+8      	; 0x11c <receive_msg+0x1c>
 114:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <str+0x2>
 118:	8a 35       	cpi	r24, 0x5A	; 90
 11a:	31 f0       	breq	.+12     	; 0x128 <receive_msg+0x28>
		}
		else
		{
			for(int i=0; i<PT_LENTH; i++)
			{
				str[i] = _RESET;
 11c:	ea e8       	ldi	r30, 0x8A	; 138
 11e:	f1 e0       	ldi	r31, 0x01	; 1
 120:	10 82       	st	Z, r1
 122:	11 82       	std	Z+1, r1	; 0x01
 124:	12 82       	std	Z+2, r1	; 0x02
 126:	08 95       	ret
	if(rx_flag == _SET)
	{
		rx_flag = _RESET;
		if(str[0] == PT_HEADER && str[2] == PT_TAIL)
		{
			if(str[1] == PT_RESET)
 128:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <str+0x1>
 12c:	8e 3e       	cpi	r24, 0xEE	; 238
 12e:	39 f4       	brne	.+14     	; 0x13e <receive_msg+0x3e>
			{
				USART_Transmit_str("Initiallizing....\n", _ASCII);
 130:	6a e0       	ldi	r22, 0x0A	; 10
 132:	89 e0       	ldi	r24, 0x09	; 9
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	0e 94 37 02 	call	0x46e	; 0x46e <USART_Transmit_str>
				all_mode_init();
 13a:	0e 94 6f 00 	call	0xde	; 0xde <all_mode_init>
			}
			for(int i=0; i<PT_LENTH; i++)
			{
				str[i] = _RESET;
 13e:	ea e8       	ldi	r30, 0x8A	; 138
 140:	f1 e0       	ldi	r31, 0x01	; 1
 142:	10 82       	st	Z, r1
 144:	11 82       	std	Z+1, r1	; 0x01
 146:	12 82       	std	Z+2, r1	; 0x02
 148:	08 95       	ret

0000014a <ApplicationMain>:
uint8_t ex_cnt = 0, count = 0, pow_ex_cnt = 1, pow_count = 1;
uint8_t before_dir = 0;

void ApplicationMain(void)
{
	receive_msg();										// 초기화 메세지 받을때 처리
 14a:	0e 94 80 00 	call	0x100	; 0x100 <receive_msg>
	
	if(tick == _SET)									// 인터럽트 동작하면
 14e:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <tick>
 152:	81 30       	cpi	r24, 0x01	; 1
 154:	09 f0       	breq	.+2      	; 0x158 <ApplicationMain+0xe>
 156:	ae c0       	rjmp	.+348    	; 0x2b4 <ApplicationMain+0x16a>
	{
		tick = _RESET;									// 인터럽트 tick 초기화
 158:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <tick>

		if(wire_dir_pos[0] == 1 && wire_dir_pos[1] == 0 && wire_dir_pos[2] == 0 && wire_dir_pos[3] == 1)		
 15c:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <wire_dir_pos>
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	b1 f4       	brne	.+44     	; 0x190 <ApplicationMain+0x46>
 164:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <wire_dir_pos+0x1>
 168:	81 11       	cpse	r24, r1
 16a:	12 c0       	rjmp	.+36     	; 0x190 <ApplicationMain+0x46>
 16c:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <wire_dir_pos+0x2>
 170:	81 11       	cpse	r24, r1
 172:	0e c0       	rjmp	.+28     	; 0x190 <ApplicationMain+0x46>
 174:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <wire_dir_pos+0x3>
 178:	81 30       	cpi	r24, 0x01	; 1
 17a:	51 f4       	brne	.+20     	; 0x190 <ApplicationMain+0x46>
		{
			direction = FORWARD;						// 1 0 0 1 이면 정방향으로 초기화
 17c:	8b e0       	ldi	r24, 0x0B	; 11
 17e:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <direction>
			for(int i=0; i<4; i++)					
			{
				wire_dir_pos[i] = _RESET;				
 182:	eb e4       	ldi	r30, 0x4B	; 75
 184:	f1 e0       	ldi	r31, 0x01	; 1
 186:	10 82       	st	Z, r1
 188:	11 82       	std	Z+1, r1	; 0x01
 18a:	12 82       	std	Z+2, r1	; 0x02
 18c:	13 82       	std	Z+3, r1	; 0x03
 18e:	1d c0       	rjmp	.+58     	; 0x1ca <ApplicationMain+0x80>
			}
		}
		else if(wire_dir_pos[0] == 0 && wire_dir_pos[1] == 1 && wire_dir_pos[2] == 1 && wire_dir_pos[3] == 0)			
 190:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <wire_dir_pos>
 194:	81 11       	cpse	r24, r1
 196:	19 c0       	rjmp	.+50     	; 0x1ca <ApplicationMain+0x80>
 198:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <wire_dir_pos+0x1>
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	a9 f4       	brne	.+42     	; 0x1ca <ApplicationMain+0x80>
 1a0:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <wire_dir_pos+0x2>
 1a4:	81 30       	cpi	r24, 0x01	; 1
 1a6:	89 f4       	brne	.+34     	; 0x1ca <ApplicationMain+0x80>
 1a8:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <wire_dir_pos+0x3>
 1ac:	81 11       	cpse	r24, r1
 1ae:	0d c0       	rjmp	.+26     	; 0x1ca <ApplicationMain+0x80>
		{
			direction = REVERSE;						// 0 1 1 0 이면 역방향으로 초기화
 1b0:	86 e1       	ldi	r24, 0x16	; 22
 1b2:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <direction>
			for(int i=0; i<4; i++)
			
			{
				wire_dir_pos[i] = _RESET;				
 1b6:	eb e4       	ldi	r30, 0x4B	; 75
 1b8:	f1 e0       	ldi	r31, 0x01	; 1
 1ba:	10 82       	st	Z, r1
 1bc:	11 82       	std	Z+1, r1	; 0x01
 1be:	12 82       	std	Z+2, r1	; 0x02
 1c0:	13 82       	std	Z+3, r1	; 0x03
			}
			flag = _SET;								// 해당 뱡향에 의한 동작 flag
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <flag>
 1c8:	04 c0       	rjmp	.+8      	; 0x1d2 <ApplicationMain+0x88>
		}
		
		if(flag == _SET)								// 해당 방향이 SET이면
 1ca:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <flag>
 1ce:	81 30       	cpi	r24, 0x01	; 1
 1d0:	e9 f4       	brne	.+58     	; 0x20c <ApplicationMain+0xc2>
		{
			if(before_dir != direction)
 1d2:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <__data_end>
 1d6:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <direction>
 1da:	98 17       	cp	r25, r24
 1dc:	99 f0       	breq	.+38     	; 0x204 <ApplicationMain+0xba>
			{
				uint8_t check = 0;						// 체크 변수
				ex_cnt++;								// 방향이 전환될 때 ex_cnt가 오름
 1de:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <ex_cnt>
 1e2:	8f 5f       	subi	r24, 0xFF	; 255
				check = ex_cnt%2;						// ex_cnt 짝수를 확인
				if(check == 0)							// 짝수이면 
 1e4:	80 ff       	sbrs	r24, 0
 1e6:	03 c0       	rjmp	.+6      	; 0x1ee <ApplicationMain+0xa4>
		if(flag == _SET)								// 해당 방향이 SET이면
		{
			if(before_dir != direction)
			{
				uint8_t check = 0;						// 체크 변수
				ex_cnt++;								// 방향이 전환될 때 ex_cnt가 오름
 1e8:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <ex_cnt>
 1ec:	0b c0       	rjmp	.+22     	; 0x204 <ApplicationMain+0xba>
				check = ex_cnt%2;						// ex_cnt 짝수를 확인
				if(check == 0)							// 짝수이면 
				{
					ex_cnt = 0;							// ex_cnt 초기화
 1ee:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <ex_cnt>
					count++;							// 운동 횟수 count를 '1'씩 더함
 1f2:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <count>
 1f6:	8f 5f       	subi	r24, 0xFF	; 255
 1f8:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <count>
					send_msg();							// 데이터 프로토콜 전송
 1fc:	0e 94 60 00 	call	0xc0	; 0xc0 <send_msg>
// 					USART_Transmit_str("\n------- cnt = ", _ASCII);
// 					translateChartoASCII(count);
// 					USART_Transmit_str(" -----------\n", _ASCII);
					flag = _RESET;
 200:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <flag>
				}
			}

			before_dir = direction;					
 204:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <direction>
 208:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__data_end>
		}
		
		if(pow_dir_pos[0] == 1 && pow_dir_pos[1] == 0 && pow_dir_pos[2] == 0 && pow_dir_pos[3] == 1)
 20c:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <pow_dir_pos>
 210:	81 30       	cpi	r24, 0x01	; 1
 212:	21 f5       	brne	.+72     	; 0x25c <ApplicationMain+0x112>
 214:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <pow_dir_pos+0x1>
 218:	81 11       	cpse	r24, r1
 21a:	20 c0       	rjmp	.+64     	; 0x25c <ApplicationMain+0x112>
 21c:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <pow_dir_pos+0x2>
 220:	81 11       	cpse	r24, r1
 222:	1c c0       	rjmp	.+56     	; 0x25c <ApplicationMain+0x112>
 224:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <pow_dir_pos+0x3>
 228:	81 30       	cpi	r24, 0x01	; 1
 22a:	c1 f4       	brne	.+48     	; 0x25c <ApplicationMain+0x112>
		{
			pow_ex_cnt++;
 22c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <pow_ex_cnt>
 230:	8f 5f       	subi	r24, 0xFF	; 255
 232:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <pow_ex_cnt>
			if(pow_ex_cnt == 5)
 236:	85 30       	cpi	r24, 0x05	; 5
 238:	41 f4       	brne	.+16     	; 0x24a <ApplicationMain+0x100>
			{
				pow_count++;
 23a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 23e:	8f 5f       	subi	r24, 0xFF	; 255
 240:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				pow_ex_cnt = 1;
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <pow_ex_cnt>
			}
			send_msg();
 24a:	0e 94 60 00 	call	0xc0	; 0xc0 <send_msg>
			for(int i=0; i<4; i++)
			{
				pow_dir_pos[i] = _RESET;					
 24e:	e7 e4       	ldi	r30, 0x47	; 71
 250:	f1 e0       	ldi	r31, 0x01	; 1
 252:	10 82       	st	Z, r1
 254:	11 82       	std	Z+1, r1	; 0x01
 256:	12 82       	std	Z+2, r1	; 0x02
 258:	13 82       	std	Z+3, r1	; 0x03
 25a:	08 95       	ret
			}
		}
		else if(pow_dir_pos[0] == 0 && pow_dir_pos[1] == 1 && pow_dir_pos[2] == 1 && pow_dir_pos[3] == 0)
 25c:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <pow_dir_pos>
 260:	81 11       	cpse	r24, r1
 262:	28 c0       	rjmp	.+80     	; 0x2b4 <ApplicationMain+0x16a>
 264:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <pow_dir_pos+0x1>
 268:	81 30       	cpi	r24, 0x01	; 1
 26a:	21 f5       	brne	.+72     	; 0x2b4 <ApplicationMain+0x16a>
 26c:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <pow_dir_pos+0x2>
 270:	81 30       	cpi	r24, 0x01	; 1
 272:	01 f5       	brne	.+64     	; 0x2b4 <ApplicationMain+0x16a>
 274:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <pow_dir_pos+0x3>
 278:	81 11       	cpse	r24, r1
 27a:	1c c0       	rjmp	.+56     	; 0x2b4 <ApplicationMain+0x16a>
		{
			pow_ex_cnt--;
 27c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <pow_ex_cnt>
 280:	81 50       	subi	r24, 0x01	; 1
 282:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <pow_ex_cnt>
			if(pow_ex_cnt == 0)
 286:	81 11       	cpse	r24, r1
 288:	0d c0       	rjmp	.+26     	; 0x2a4 <ApplicationMain+0x15a>
			{
				pow_count--;
 28a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 28e:	81 50       	subi	r24, 0x01	; 1
 290:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				pow_ex_cnt = 4;
 294:	94 e0       	ldi	r25, 0x04	; 4
 296:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <pow_ex_cnt>
				if(pow_count < 1)	pow_count = 1;
 29a:	81 11       	cpse	r24, r1
 29c:	03 c0       	rjmp	.+6      	; 0x2a4 <ApplicationMain+0x15a>
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			}
			
			send_msg();
 2a4:	0e 94 60 00 	call	0xc0	; 0xc0 <send_msg>
			for(int i=0; i<4; i++)
			{
				pow_dir_pos[i] = _RESET;					
 2a8:	e7 e4       	ldi	r30, 0x47	; 71
 2aa:	f1 e0       	ldi	r31, 0x01	; 1
 2ac:	10 82       	st	Z, r1
 2ae:	11 82       	std	Z+1, r1	; 0x01
 2b0:	12 82       	std	Z+2, r1	; 0x02
 2b2:	13 82       	std	Z+3, r1	; 0x03
 2b4:	08 95       	ret

000002b6 <PCINT_init>:
volatile uint8_t i = 0, j = 0;


void PCINT_init(void)
{
	DDRB &= ~((1 << PORTB0) | (1 << PORTB1) | (1 << PORTB2) | (1 << PORTB3));
 2b6:	84 b1       	in	r24, 0x04	; 4
 2b8:	80 7f       	andi	r24, 0xF0	; 240
 2ba:	84 b9       	out	0x04, r24	; 4
	PCICR = (1 << PCIE0);
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	PCMSK0 = (1 << PCINT0) | (1 << PCINT1) | (1 << PCINT2) | (1 << PCINT3);
 2c2:	8f e0       	ldi	r24, 0x0F	; 15
 2c4:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
 2c8:	08 95       	ret

000002ca <__vector_3>:
}


ISR(PCINT0_vect)
{
 2ca:	1f 92       	push	r1
 2cc:	0f 92       	push	r0
 2ce:	0f b6       	in	r0, 0x3f	; 63
 2d0:	0f 92       	push	r0
 2d2:	11 24       	eor	r1, r1
 2d4:	8f 93       	push	r24
 2d6:	9f 93       	push	r25
 2d8:	ef 93       	push	r30
 2da:	ff 93       	push	r31
	uint8_t input_check = PINB & 0x0F;
 2dc:	83 b1       	in	r24, 0x03	; 3
	tick = _SET;
 2de:	91 e0       	ldi	r25, 0x01	; 1
 2e0:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <tick>
	switch(input_check)
 2e4:	8f 70       	andi	r24, 0x0F	; 15
 2e6:	82 30       	cpi	r24, 0x02	; 2
 2e8:	59 f0       	breq	.+22     	; 0x300 <__vector_3+0x36>
 2ea:	20 f4       	brcc	.+8      	; 0x2f4 <__vector_3+0x2a>
 2ec:	81 30       	cpi	r24, 0x01	; 1
 2ee:	09 f4       	brne	.+2      	; 0x2f2 <__vector_3+0x28>
 2f0:	48 c0       	rjmp	.+144    	; 0x382 <__vector_3+0xb8>
 2f2:	85 c0       	rjmp	.+266    	; 0x3fe <__vector_3+0x134>
 2f4:	84 30       	cpi	r24, 0x04	; 4
 2f6:	21 f1       	breq	.+72     	; 0x340 <__vector_3+0x76>
 2f8:	88 30       	cpi	r24, 0x08	; 8
 2fa:	09 f4       	brne	.+2      	; 0x2fe <__vector_3+0x34>
 2fc:	61 c0       	rjmp	.+194    	; 0x3c0 <__vector_3+0xf6>
 2fe:	7f c0       	rjmp	.+254    	; 0x3fe <__vector_3+0x134>
	{
		case WIRE_DIR_LEFT:							// 왼쪽 리드스위치 INT가 동작하면
	
		wire_dir_pos[i++] = forward_dir_flg = _SET;		// wire_dir_pos[0 or 2] '1' 설정
 300:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <i>
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	8e 0f       	add	r24, r30
 308:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <i>
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <forward_dir_flg>
 314:	e5 5b       	subi	r30, 0xB5	; 181
 316:	fe 4f       	sbci	r31, 0xFE	; 254
 318:	80 83       	st	Z, r24
		wire_dir_pos[i++] = reverse_dir_flg = _RESET;	// wire_dir_pos[1 or 3] '0' 설정
 31a:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <i>
 31e:	8e 0f       	add	r24, r30
 320:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <i>
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <reverse_dir_flg>
 32a:	e5 5b       	subi	r30, 0xB5	; 181
 32c:	fe 4f       	sbci	r31, 0xFE	; 254
 32e:	10 82       	st	Z, r1
		if(i>3)		i = _RESET;
 330:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <i>
 334:	84 30       	cpi	r24, 0x04	; 4
 336:	08 f4       	brcc	.+2      	; 0x33a <__vector_3+0x70>
 338:	62 c0       	rjmp	.+196    	; 0x3fe <__vector_3+0x134>
 33a:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <i>
 33e:	5f c0       	rjmp	.+190    	; 0x3fe <__vector_3+0x134>
// 			wire_left_flg_2 = _SET;					// 오른쪽 flag '0' 초기화
// 		}
		break;
		
		case WIRE_DIR_RIGHT:						// 오른쪽 리드스위치 INT가 동작하면
		wire_dir_pos[i++] = forward_dir_flg = _RESET;	// wire_dir_pos[0 or 2] '0' 설정
 340:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <i>
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	8e 0f       	add	r24, r30
 348:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <i>
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <forward_dir_flg>
 352:	e5 5b       	subi	r30, 0xB5	; 181
 354:	fe 4f       	sbci	r31, 0xFE	; 254
 356:	10 82       	st	Z, r1
		wire_dir_pos[i++] = reverse_dir_flg = _SET;		// wire_dir_pos[1 or 3] '1' 설정
 358:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <i>
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	8e 0f       	add	r24, r30
 360:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <i>
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <reverse_dir_flg>
 36c:	e5 5b       	subi	r30, 0xB5	; 181
 36e:	fe 4f       	sbci	r31, 0xFE	; 254
 370:	80 83       	st	Z, r24
		if(i>3)		i = _RESET;		
 372:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <i>
 376:	84 30       	cpi	r24, 0x04	; 4
 378:	08 f4       	brcc	.+2      	; 0x37c <__vector_3+0xb2>
 37a:	41 c0       	rjmp	.+130    	; 0x3fe <__vector_3+0x134>
 37c:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <i>
 380:	3e c0       	rjmp	.+124    	; 0x3fe <__vector_3+0x134>
// 			wire_right_flg_2 = _RESET;				// 오른쪽 flag '0' 초기화
// 		}
		break;
		
		case POW_DIR_LEFT:
		pow_dir_pos[j++] = pow_forward_dir_flg = _SET;
 382:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <j>
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	8e 0f       	add	r24, r30
 38a:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <j>
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <pow_forward_dir_flg>
 396:	e9 5b       	subi	r30, 0xB9	; 185
 398:	fe 4f       	sbci	r31, 0xFE	; 254
 39a:	80 83       	st	Z, r24
		pow_dir_pos[j++] = pow_reverse_dir_flg = _RESET;
 39c:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <j>
 3a0:	8e 0f       	add	r24, r30
 3a2:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <j>
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <pow_reverse_dir_flg>
 3ac:	e9 5b       	subi	r30, 0xB9	; 185
 3ae:	fe 4f       	sbci	r31, 0xFE	; 254
 3b0:	10 82       	st	Z, r1
		if(j>3)		j = _RESET;
 3b2:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <j>
 3b6:	84 30       	cpi	r24, 0x04	; 4
 3b8:	10 f1       	brcs	.+68     	; 0x3fe <__vector_3+0x134>
 3ba:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <j>
 3be:	1f c0       	rjmp	.+62     	; 0x3fe <__vector_3+0x134>
		break;
		
		case POW_DIR_RIGHT:
		pow_dir_pos[j++] = pow_forward_dir_flg = _RESET;
 3c0:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <j>
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	8e 0f       	add	r24, r30
 3c8:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <j>
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <pow_forward_dir_flg>
 3d2:	e9 5b       	subi	r30, 0xB9	; 185
 3d4:	fe 4f       	sbci	r31, 0xFE	; 254
 3d6:	10 82       	st	Z, r1
		pow_dir_pos[j++] = pow_reverse_dir_flg = _SET;
 3d8:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <j>
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	8e 0f       	add	r24, r30
 3e0:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <j>
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <pow_reverse_dir_flg>
 3ec:	e9 5b       	subi	r30, 0xB9	; 185
 3ee:	fe 4f       	sbci	r31, 0xFE	; 254
 3f0:	80 83       	st	Z, r24
		if(j>3)		j = _RESET;
 3f2:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <j>
 3f6:	84 30       	cpi	r24, 0x04	; 4
 3f8:	10 f0       	brcs	.+4      	; 0x3fe <__vector_3+0x134>
 3fa:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <j>
		break;		
	}
 3fe:	ff 91       	pop	r31
 400:	ef 91       	pop	r30
 402:	9f 91       	pop	r25
 404:	8f 91       	pop	r24
 406:	0f 90       	pop	r0
 408:	0f be       	out	0x3f, r0	; 63
 40a:	0f 90       	pop	r0
 40c:	1f 90       	pop	r1
 40e:	18 95       	reti

00000410 <USART_Init>:
			myString[i] = response;
			i++;
		}
	}
	myString[i] = 0;
}
 410:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 414:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 418:	88 e9       	ldi	r24, 0x98	; 152
 41a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 41e:	8e e0       	ldi	r24, 0x0E	; 14
 420:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 424:	08 95       	ret

00000426 <USART_Transmit_char>:
 426:	e0 ec       	ldi	r30, 0xC0	; 192
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	90 81       	ld	r25, Z
 42c:	95 ff       	sbrs	r25, 5
 42e:	fd cf       	rjmp	.-6      	; 0x42a <USART_Transmit_char+0x4>
 430:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 434:	08 95       	ret

00000436 <nibbleToHexChar>:
 436:	8a 30       	cpi	r24, 0x0A	; 10
 438:	10 f4       	brcc	.+4      	; 0x43e <nibbleToHexChar+0x8>
 43a:	80 5d       	subi	r24, 0xD0	; 208
 43c:	08 95       	ret
 43e:	89 5c       	subi	r24, 0xC9	; 201
 440:	08 95       	ret

00000442 <translateChartoASCII>:
 442:	cf 93       	push	r28
 444:	df 93       	push	r29
 446:	c8 2f       	mov	r28, r24
 448:	82 95       	swap	r24
 44a:	8f 70       	andi	r24, 0x0F	; 15
 44c:	0e 94 1b 02 	call	0x436	; 0x436 <nibbleToHexChar>
 450:	d8 2f       	mov	r29, r24
 452:	8c 2f       	mov	r24, r28
 454:	8f 70       	andi	r24, 0x0F	; 15
 456:	0e 94 1b 02 	call	0x436	; 0x436 <nibbleToHexChar>
 45a:	c8 2f       	mov	r28, r24
 45c:	8d 2f       	mov	r24, r29
 45e:	0e 94 13 02 	call	0x426	; 0x426 <USART_Transmit_char>
 462:	8c 2f       	mov	r24, r28
 464:	0e 94 13 02 	call	0x426	; 0x426 <USART_Transmit_char>
 468:	df 91       	pop	r29
 46a:	cf 91       	pop	r28
 46c:	08 95       	ret

0000046e <USART_Transmit_str>:
 46e:	cf 93       	push	r28
 470:	df 93       	push	r29
 472:	ec 01       	movw	r28, r24
 474:	6a 30       	cpi	r22, 0x0A	; 10
 476:	51 f4       	brne	.+20     	; 0x48c <USART_Transmit_str+0x1e>
 478:	88 81       	ld	r24, Y
 47a:	88 23       	and	r24, r24
 47c:	91 f0       	breq	.+36     	; 0x4a2 <USART_Transmit_str+0x34>
 47e:	21 96       	adiw	r28, 0x01	; 1
 480:	0e 94 13 02 	call	0x426	; 0x426 <USART_Transmit_char>
 484:	89 91       	ld	r24, Y+
 486:	81 11       	cpse	r24, r1
 488:	fb cf       	rjmp	.-10     	; 0x480 <USART_Transmit_str+0x12>
 48a:	0b c0       	rjmp	.+22     	; 0x4a2 <USART_Transmit_str+0x34>
 48c:	6b 30       	cpi	r22, 0x0B	; 11
 48e:	49 f4       	brne	.+18     	; 0x4a2 <USART_Transmit_str+0x34>
 490:	88 81       	ld	r24, Y
 492:	88 23       	and	r24, r24
 494:	31 f0       	breq	.+12     	; 0x4a2 <USART_Transmit_str+0x34>
 496:	21 96       	adiw	r28, 0x01	; 1
 498:	0e 94 21 02 	call	0x442	; 0x442 <translateChartoASCII>
 49c:	89 91       	ld	r24, Y+
 49e:	81 11       	cpse	r24, r1
 4a0:	fb cf       	rjmp	.-10     	; 0x498 <USART_Transmit_str+0x2a>
 4a2:	df 91       	pop	r29
 4a4:	cf 91       	pop	r28
 4a6:	08 95       	ret

000004a8 <__vector_18>:
// 	while(!(UCSR0A & (1 << UDRE0)));
// 	UDR0 = data;
// }

ISR(USART_RX_vect)
{
 4a8:	1f 92       	push	r1
 4aa:	0f 92       	push	r0
 4ac:	0f b6       	in	r0, 0x3f	; 63
 4ae:	0f 92       	push	r0
 4b0:	11 24       	eor	r1, r1
 4b2:	8f 93       	push	r24
 4b4:	9f 93       	push	r25
 4b6:	af 93       	push	r26
 4b8:	bf 93       	push	r27
 4ba:	ef 93       	push	r30
 4bc:	ff 93       	push	r31
	rx_data = UDR0;
 4be:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 4c2:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <rx_data>
	rx_buf[rx_cnt++] = rx_data;
 4c6:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <rx_cnt>
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	8e 0f       	add	r24, r30
 4ce:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <rx_cnt>
 4d2:	f0 e0       	ldi	r31, 0x00	; 0
 4d4:	e9 5a       	subi	r30, 0xA9	; 169
 4d6:	fe 4f       	sbci	r31, 0xFE	; 254
 4d8:	90 83       	st	Z, r25
	//USART_Transmit_char(rx_data);
	if(rx_cnt == PT_LENTH)
 4da:	83 30       	cpi	r24, 0x03	; 3
 4dc:	91 f4       	brne	.+36     	; 0x502 <__vector_18+0x5a>
	{
		memcpy(str, rx_buf, PT_LENTH);
 4de:	ea e8       	ldi	r30, 0x8A	; 138
 4e0:	f1 e0       	ldi	r31, 0x01	; 1
 4e2:	a7 e5       	ldi	r26, 0x57	; 87
 4e4:	b1 e0       	ldi	r27, 0x01	; 1
 4e6:	8d 91       	ld	r24, X+
 4e8:	9c 91       	ld	r25, X
 4ea:	11 97       	sbiw	r26, 0x01	; 1
 4ec:	91 83       	std	Z+1, r25	; 0x01
 4ee:	80 83       	st	Z, r24
 4f0:	12 96       	adiw	r26, 0x02	; 2
 4f2:	8c 91       	ld	r24, X
 4f4:	82 83       	std	Z+2, r24	; 0x02
		str[PT_LENTH] = 0;
 4f6:	13 82       	std	Z+3, r1	; 0x03
		rx_cnt = 0;
 4f8:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <rx_cnt>
		rx_flag = 1;
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <rx_flag>
	}
 502:	ff 91       	pop	r31
 504:	ef 91       	pop	r30
 506:	bf 91       	pop	r27
 508:	af 91       	pop	r26
 50a:	9f 91       	pop	r25
 50c:	8f 91       	pop	r24
 50e:	0f 90       	pop	r0
 510:	0f be       	out	0x3f, r0	; 63
 512:	0f 90       	pop	r0
 514:	1f 90       	pop	r1
 516:	18 95       	reti

00000518 <main>:

#include "common.h"

int main(void)
{
	AppInit();
 518:	0e 94 53 00 	call	0xa6	; 0xa6 <AppInit>
    while (1) 
    {
		ApplicationMain();
 51c:	0e 94 a5 00 	call	0x14a	; 0x14a <ApplicationMain>
 520:	fd cf       	rjmp	.-6      	; 0x51c <main+0x4>

00000522 <_exit>:
 522:	f8 94       	cli

00000524 <__stop_program>:
 524:	ff cf       	rjmp	.-2      	; 0x524 <__stop_program>
