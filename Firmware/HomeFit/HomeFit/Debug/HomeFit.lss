
HomeFit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000382  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000078  00800100  00800100  000003f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000428  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000eac  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000943  00000000  00000000  000013fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000795  00000000  00000000  00001d3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f4  00000000  00000000  000024d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000566  00000000  00000000  000026c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000627  00000000  00000000  00002c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003255  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__vector_3>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 82 01 	jmp	0x304	; 0x304 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 37       	cpi	r26, 0x78	; 120
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 ba 01 	call	0x374	; 0x374 <main>
  88:	0c 94 bf 01 	jmp	0x37e	; 0x37e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <AppInit>:
	}
}

void AppInit(void)
{
	USART_Init(BAUD_9600);			// USART 9600 baudrate 설정
  90:	87 e6       	ldi	r24, 0x67	; 103
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	0e 94 6f 01 	call	0x2de	; 0x2de <USART_Init>
	PCINT_init();
  98:	0e 94 ed 00 	call	0x1da	; 0x1da <PCINT_init>
	sei();
  9c:	78 94       	sei
  9e:	08 95       	ret

000000a0 <send_msg>:
	send_msg();
}

void send_msg(void)
{
	USART_Transmit_char(0xEA);		// 프로토콜 전송
  a0:	8a ee       	ldi	r24, 0xEA	; 234
  a2:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <USART_Transmit_char>
	USART_Transmit_char(count);
  a6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <count>
  aa:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <USART_Transmit_char>
	USART_Transmit_char(0x00);
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <USART_Transmit_char>
	USART_Transmit_char(0x5A);	
  b4:	8a e5       	ldi	r24, 0x5A	; 90
  b6:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <USART_Transmit_char>
  ba:	08 95       	ret

000000bc <all_mode_init>:
/*	USART_Transmit_str("START\n", _ASCII);*/
}

void all_mode_init(void)
{
	flag = _RESET;
  bc:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <flag>
	count = _RESET;
  c0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <count>
	ex_cnt = _RESET;
  c4:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <ex_cnt>
	direction = _RESET;
  c8:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <direction>
	before_dir = _RESET;
  cc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	send_msg();
  d0:	0e 94 50 00 	call	0xa0	; 0xa0 <send_msg>
  d4:	08 95       	ret

000000d6 <receive_msg>:
	USART_Transmit_char(0x5A);	
}

void receive_msg(void)
{
	if(rx_flag == _SET)
  d6:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <rx_flag>
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	d9 f4       	brne	.+54     	; 0x114 <receive_msg+0x3e>
	{
		rx_flag = _RESET;
  de:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <rx_flag>
		if(str[0] == PT_HEADER && str[2] == PT_TAIL)
  e2:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <str>
  e6:	8a 3e       	cpi	r24, 0xEA	; 234
  e8:	21 f4       	brne	.+8      	; 0xf2 <receive_msg+0x1c>
  ea:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <str+0x2>
  ee:	8a 35       	cpi	r24, 0x5A	; 90
  f0:	31 f0       	breq	.+12     	; 0xfe <receive_msg+0x28>
		}
		else
		{
			for(int i=0; i<PT_LENTH; i++)
			{
				str[i] = _RESET;
  f2:	e6 e4       	ldi	r30, 0x46	; 70
  f4:	f1 e0       	ldi	r31, 0x01	; 1
  f6:	10 82       	st	Z, r1
  f8:	11 82       	std	Z+1, r1	; 0x01
  fa:	12 82       	std	Z+2, r1	; 0x02
  fc:	08 95       	ret
	if(rx_flag == _SET)
	{
		rx_flag = _RESET;
		if(str[0] == PT_HEADER && str[2] == PT_TAIL)
		{
			if(str[1] == PT_RESET)
  fe:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <str+0x1>
 102:	8e 3e       	cpi	r24, 0xEE	; 238
 104:	11 f4       	brne	.+4      	; 0x10a <receive_msg+0x34>
			{
				/*				USART_Transmit_str("Initiallizing....\n", _ASCII);*/
				all_mode_init();
 106:	0e 94 5e 00 	call	0xbc	; 0xbc <all_mode_init>
			}
			for(int i=0; i<PT_LENTH; i++)
			{
				str[i] = _RESET;
 10a:	e6 e4       	ldi	r30, 0x46	; 70
 10c:	f1 e0       	ldi	r31, 0x01	; 1
 10e:	10 82       	st	Z, r1
 110:	11 82       	std	Z+1, r1	; 0x01
 112:	12 82       	std	Z+2, r1	; 0x02
 114:	08 95       	ret

00000116 <ApplicationMain>:
uint8_t before_pos[4] = {0, 0, 0, 0};
uint8_t before_dir = 0;

void ApplicationMain(void)
{
	receive_msg();
 116:	0e 94 6b 00 	call	0xd6	; 0xd6 <receive_msg>
	
	if(tick == _SET)									// 인터럽트 동작하면
 11a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <tick>
 11e:	81 30       	cpi	r24, 0x01	; 1
 120:	09 f0       	breq	.+2      	; 0x124 <ApplicationMain+0xe>
 122:	5a c0       	rjmp	.+180    	; 0x1d8 <ApplicationMain+0xc2>
	{
		tick = _RESET;									// 인터럽트 tick 초기화
 124:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <tick>

		if(dir_pos[0] == 1 && dir_pos[1] == 0 && dir_pos[2] == 0 && dir_pos[3] == 1)		// 방향 확인
 128:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <dir_pos>
 12c:	81 30       	cpi	r24, 0x01	; 1
 12e:	b1 f4       	brne	.+44     	; 0x15c <ApplicationMain+0x46>
 130:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir_pos+0x1>
 134:	81 11       	cpse	r24, r1
 136:	12 c0       	rjmp	.+36     	; 0x15c <ApplicationMain+0x46>
 138:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <dir_pos+0x2>
 13c:	81 11       	cpse	r24, r1
 13e:	0e c0       	rjmp	.+28     	; 0x15c <ApplicationMain+0x46>
 140:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <dir_pos+0x3>
 144:	81 30       	cpi	r24, 0x01	; 1
 146:	51 f4       	brne	.+20     	; 0x15c <ApplicationMain+0x46>
		{
			direction = FORWARD;					// 정방향으로 초기화
 148:	8b e0       	ldi	r24, 0x0B	; 11
 14a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <direction>
			for(int i=0; i<4; i++)					
			{
				dir_pos[i] = _RESET;						// 1 0 0 1 초기화
 14e:	e5 e0       	ldi	r30, 0x05	; 5
 150:	f1 e0       	ldi	r31, 0x01	; 1
 152:	10 82       	st	Z, r1
 154:	11 82       	std	Z+1, r1	; 0x01
 156:	12 82       	std	Z+2, r1	; 0x02
 158:	13 82       	std	Z+3, r1	; 0x03
 15a:	1d c0       	rjmp	.+58     	; 0x196 <ApplicationMain+0x80>
			}
		}
		else if(dir_pos[0] == 0 && dir_pos[1] == 1 && dir_pos[2] == 1 && dir_pos[3] == 0)			
 15c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <dir_pos>
 160:	81 11       	cpse	r24, r1
 162:	19 c0       	rjmp	.+50     	; 0x196 <ApplicationMain+0x80>
 164:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir_pos+0x1>
 168:	81 30       	cpi	r24, 0x01	; 1
 16a:	a9 f4       	brne	.+42     	; 0x196 <ApplicationMain+0x80>
 16c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <dir_pos+0x2>
 170:	81 30       	cpi	r24, 0x01	; 1
 172:	89 f4       	brne	.+34     	; 0x196 <ApplicationMain+0x80>
 174:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <dir_pos+0x3>
 178:	81 11       	cpse	r24, r1
 17a:	0d c0       	rjmp	.+26     	; 0x196 <ApplicationMain+0x80>
		{
			direction = REVERSE;					// 역방향으로 초기화
 17c:	86 e1       	ldi	r24, 0x16	; 22
 17e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <direction>
			for(int i=0; i<4; i++)
			{
				dir_pos[i] = _RESET;						// 0 1 1 0 초기화
 182:	e5 e0       	ldi	r30, 0x05	; 5
 184:	f1 e0       	ldi	r31, 0x01	; 1
 186:	10 82       	st	Z, r1
 188:	11 82       	std	Z+1, r1	; 0x01
 18a:	12 82       	std	Z+2, r1	; 0x02
 18c:	13 82       	std	Z+3, r1	; 0x03
			}
			flag = _SET;								// 해당 뱡향에 의한 동작 flag
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <flag>
 194:	04 c0       	rjmp	.+8      	; 0x19e <ApplicationMain+0x88>
		}
		
		if(flag == _SET)								// 해당 방향이 SET이면
 196:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <flag>
 19a:	81 30       	cpi	r24, 0x01	; 1
 19c:	e9 f4       	brne	.+58     	; 0x1d8 <ApplicationMain+0xc2>
		{
			if(before_dir != direction)
 19e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 1a2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <direction>
 1a6:	98 17       	cp	r25, r24
 1a8:	99 f0       	breq	.+38     	; 0x1d0 <ApplicationMain+0xba>
			{
				uint8_t check = 0;					// 체크 변수
				ex_cnt++;							// 방향이 전환될 때 ex_cnt가 오름
 1aa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ex_cnt>
 1ae:	8f 5f       	subi	r24, 0xFF	; 255
				check = ex_cnt%2;					// ex_cnt 짝수를 확인
				if(check == 0)						// 짝수이면 
 1b0:	80 ff       	sbrs	r24, 0
 1b2:	03 c0       	rjmp	.+6      	; 0x1ba <ApplicationMain+0xa4>
		if(flag == _SET)								// 해당 방향이 SET이면
		{
			if(before_dir != direction)
			{
				uint8_t check = 0;					// 체크 변수
				ex_cnt++;							// 방향이 전환될 때 ex_cnt가 오름
 1b4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ex_cnt>
 1b8:	0b c0       	rjmp	.+22     	; 0x1d0 <ApplicationMain+0xba>
				check = ex_cnt%2;					// ex_cnt 짝수를 확인
				if(check == 0)						// 짝수이면 
				{
					ex_cnt = 0;						// ex_cnt 초기화
 1ba:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <ex_cnt>
					count++;						// 운동 횟수 count를 '1'씩 더함
 1be:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <count>
 1c2:	8f 5f       	subi	r24, 0xFF	; 255
 1c4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <count>
					send_msg();						// 프로토콜 전송
 1c8:	0e 94 50 00 	call	0xa0	; 0xa0 <send_msg>
// 					USART_Transmit_str("\n------- cnt = ", _ASCII);
// 					translateChartoASCII(count);
// 					USART_Transmit_str(" -----------\n", _ASCII);
					flag = _RESET;
 1cc:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <flag>
				}
			}

			before_dir = direction;
 1d0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <direction>
 1d4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 1d8:	08 95       	ret

000001da <PCINT_init>:
uint8_t tick = 0;
volatile uint8_t dir_pos[4] = {0, 0, 0, 0};
volatile uint8_t i = 0;
void PCINT_init(void)
{
	DDRB &= ~((1 << PORTB0) | (1 << PORTB1) | (1 << PORTB2) | (1 << PORTB3));
 1da:	84 b1       	in	r24, 0x04	; 4
 1dc:	80 7f       	andi	r24, 0xF0	; 240
 1de:	84 b9       	out	0x04, r24	; 4
	PCICR = (1 << PCIE0);
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	PCMSK0 = (1 << PCINT0) | (1 << PCINT1) | (1 << PCINT2) | (1 << PCINT3);
 1e6:	8f e0       	ldi	r24, 0x0F	; 15
 1e8:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
 1ec:	08 95       	ret

000001ee <__vector_3>:
}

ISR(PCINT0_vect)
{
 1ee:	1f 92       	push	r1
 1f0:	0f 92       	push	r0
 1f2:	0f b6       	in	r0, 0x3f	; 63
 1f4:	0f 92       	push	r0
 1f6:	11 24       	eor	r1, r1
 1f8:	8f 93       	push	r24
 1fa:	9f 93       	push	r25
 1fc:	ef 93       	push	r30
 1fe:	ff 93       	push	r31
	uint8_t input_check = PINB & 0x0F;
 200:	83 b1       	in	r24, 0x03	; 3
	tick = _SET;
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <tick>
	switch(input_check)
 208:	8f 70       	andi	r24, 0x0F	; 15
 20a:	82 30       	cpi	r24, 0x02	; 2
 20c:	19 f0       	breq	.+6      	; 0x214 <__vector_3+0x26>
 20e:	84 30       	cpi	r24, 0x04	; 4
 210:	79 f1       	breq	.+94     	; 0x270 <__vector_3+0x82>
 212:	5c c0       	rjmp	.+184    	; 0x2cc <__vector_3+0xde>
	{
		case WIRE_DIR_LEFT:						// 왼쪽 리드스위치 INT가 동작하면
	
		dir_pos[i++] = forward_dir_flg = _SET;			// 정방향 flag '1' 설정
 214:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <i>
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	8e 0f       	add	r24, r30
 21c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <i>
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <forward_dir_flg>
 228:	eb 5f       	subi	r30, 0xFB	; 251
 22a:	fe 4f       	sbci	r31, 0xFE	; 254
 22c:	80 83       	st	Z, r24
		dir_pos[i++] = reverse_dir_flg = _RESET;
 22e:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <i>
 232:	8e 0f       	add	r24, r30
 234:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <i>
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <reverse_dir_flg>
 23e:	eb 5f       	subi	r30, 0xFB	; 251
 240:	fe 4f       	sbci	r31, 0xFE	; 254
 242:	10 82       	st	Z, r1
		if(i>3)		i = _RESET;
 244:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <i>
 248:	84 30       	cpi	r24, 0x04	; 4
 24a:	10 f0       	brcs	.+4      	; 0x250 <__vector_3+0x62>
 24c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <i>
		
		if(direction == FORWARD)				// 방향이 정방향으로 지정됐다면
 250:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <direction>
 254:	8b 30       	cpi	r24, 0x0B	; 11
 256:	31 f4       	brne	.+12     	; 0x264 <__vector_3+0x76>
		{
			wire_left_flg_1 = _SET;				// 왼쪽 flag '0' 설정
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <wire_left_flg_1>
			wire_left_flg_2 = _RESET;				// 오른쪽 flag '1' 설정
 25e:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <wire_left_flg_2>
 262:	34 c0       	rjmp	.+104    	; 0x2cc <__vector_3+0xde>
		}
		else									// 최초 동작 스위치가 왼쪽이면
		{
			wire_left_flg_1 = _RESET;				// 왼쪽 flag '1' 초기화
 264:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <wire_left_flg_1>
			wire_left_flg_2 = _SET;				// 오른쪽 flag '0' 초기화
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <wire_left_flg_2>
 26e:	2e c0       	rjmp	.+92     	; 0x2cc <__vector_3+0xde>
		}
		break;
		
		case WIRE_DIR_RIGHT:					// 오른쪽 리드스위치 INT가 동작하면
		dir_pos[i++] = forward_dir_flg = _RESET;			// 정방향 flag '1' 설정
 270:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <i>
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	8e 0f       	add	r24, r30
 278:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <i>
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <forward_dir_flg>
 282:	eb 5f       	subi	r30, 0xFB	; 251
 284:	fe 4f       	sbci	r31, 0xFE	; 254
 286:	10 82       	st	Z, r1
		dir_pos[i++] = reverse_dir_flg = _SET;
 288:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <i>
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	8e 0f       	add	r24, r30
 290:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <i>
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <reverse_dir_flg>
 29c:	eb 5f       	subi	r30, 0xFB	; 251
 29e:	fe 4f       	sbci	r31, 0xFE	; 254
 2a0:	80 83       	st	Z, r24
		if(i>3)		i = _RESET;		
 2a2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <i>
 2a6:	84 30       	cpi	r24, 0x04	; 4
 2a8:	10 f0       	brcs	.+4      	; 0x2ae <__vector_3+0xc0>
 2aa:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <i>
		
		if(direction == FORWARD)				// 방향이 정방향으로 지정됐다면
 2ae:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <direction>
 2b2:	8b 30       	cpi	r24, 0x0B	; 11
 2b4:	31 f4       	brne	.+12     	; 0x2c2 <__vector_3+0xd4>
		{
			wire_right_flg_1 = _RESET;				// 왼쪽 flag '1' 설정
 2b6:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <wire_right_flg_1>
			wire_right_flg_2 = _SET;				// 오른쪽 flag '0' 설정
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <wire_right_flg_2>
 2c0:	05 c0       	rjmp	.+10     	; 0x2cc <__vector_3+0xde>
		}
		else									// 최초 동작 스위치가 오른쪽이면
		{
			wire_right_flg_1 = _SET;				// 왼쪽 flag '1' 초기화
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <wire_right_flg_1>
			wire_right_flg_2 = _RESET;				// 오른쪽 flag '0' 초기화
 2c8:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <wire_right_flg_2>
			break;
		
		case POW_DIR_RIGHT:
			break;		
	}
 2cc:	ff 91       	pop	r31
 2ce:	ef 91       	pop	r30
 2d0:	9f 91       	pop	r25
 2d2:	8f 91       	pop	r24
 2d4:	0f 90       	pop	r0
 2d6:	0f be       	out	0x3f, r0	; 63
 2d8:	0f 90       	pop	r0
 2da:	1f 90       	pop	r1
 2dc:	18 95       	reti

000002de <USART_Init>:
			myString[i] = response;
			i++;
		}
	}
	myString[i] = 0;
}
 2de:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 2e2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 2e6:	88 e9       	ldi	r24, 0x98	; 152
 2e8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 2ec:	8e e0       	ldi	r24, 0x0E	; 14
 2ee:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 2f2:	08 95       	ret

000002f4 <USART_Transmit_char>:
 2f4:	e0 ec       	ldi	r30, 0xC0	; 192
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	90 81       	ld	r25, Z
 2fa:	95 ff       	sbrs	r25, 5
 2fc:	fd cf       	rjmp	.-6      	; 0x2f8 <USART_Transmit_char+0x4>
 2fe:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 302:	08 95       	ret

00000304 <__vector_18>:
// 	while(!(UCSR0A & (1 << UDRE0)));
// 	UDR0 = data;
// }

ISR(USART_RX_vect)
{
 304:	1f 92       	push	r1
 306:	0f 92       	push	r0
 308:	0f b6       	in	r0, 0x3f	; 63
 30a:	0f 92       	push	r0
 30c:	11 24       	eor	r1, r1
 30e:	8f 93       	push	r24
 310:	9f 93       	push	r25
 312:	af 93       	push	r26
 314:	bf 93       	push	r27
 316:	ef 93       	push	r30
 318:	ff 93       	push	r31
	rx_data = UDR0;
 31a:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 31e:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <rx_data>
	rx_buf[rx_cnt++] = rx_data;
 322:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <rx_cnt>
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	8e 0f       	add	r24, r30
 32a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <rx_cnt>
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	ed 5e       	subi	r30, 0xED	; 237
 332:	fe 4f       	sbci	r31, 0xFE	; 254
 334:	90 83       	st	Z, r25
	if(rx_cnt == PT_LENTH)
 336:	83 30       	cpi	r24, 0x03	; 3
 338:	91 f4       	brne	.+36     	; 0x35e <__vector_18+0x5a>
	{
		memcpy(str, rx_buf, PT_LENTH);
 33a:	e6 e4       	ldi	r30, 0x46	; 70
 33c:	f1 e0       	ldi	r31, 0x01	; 1
 33e:	a3 e1       	ldi	r26, 0x13	; 19
 340:	b1 e0       	ldi	r27, 0x01	; 1
 342:	8d 91       	ld	r24, X+
 344:	9c 91       	ld	r25, X
 346:	11 97       	sbiw	r26, 0x01	; 1
 348:	91 83       	std	Z+1, r25	; 0x01
 34a:	80 83       	st	Z, r24
 34c:	12 96       	adiw	r26, 0x02	; 2
 34e:	8c 91       	ld	r24, X
 350:	82 83       	std	Z+2, r24	; 0x02
		str[PT_LENTH] = 0;
 352:	13 82       	std	Z+3, r1	; 0x03
		rx_cnt = 0;
 354:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <rx_cnt>
		rx_flag = 1;
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <rx_flag>
	}
 35e:	ff 91       	pop	r31
 360:	ef 91       	pop	r30
 362:	bf 91       	pop	r27
 364:	af 91       	pop	r26
 366:	9f 91       	pop	r25
 368:	8f 91       	pop	r24
 36a:	0f 90       	pop	r0
 36c:	0f be       	out	0x3f, r0	; 63
 36e:	0f 90       	pop	r0
 370:	1f 90       	pop	r1
 372:	18 95       	reti

00000374 <main>:

#include "common.h"

int main(void)
{
	AppInit();
 374:	0e 94 48 00 	call	0x90	; 0x90 <AppInit>
    while (1) 
    {
		ApplicationMain();
 378:	0e 94 8b 00 	call	0x116	; 0x116 <ApplicationMain>
 37c:	fd cf       	rjmp	.-6      	; 0x378 <main+0x4>

0000037e <_exit>:
 37e:	f8 94       	cli

00000380 <__stop_program>:
 380:	ff cf       	rjmp	.-2      	; 0x380 <__stop_program>
