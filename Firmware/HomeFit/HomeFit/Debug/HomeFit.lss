
HomeFit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000030a  0000039e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000030a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000074  00800108  00800108  000003a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d97  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008fe  00000000  00000000  0000127f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006aa  00000000  00000000  00001b7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b4  00000000  00000000  00002228  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000532  00000000  00000000  000023dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000051f  00000000  00000000  0000290e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002e2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 49 01 	jmp	0x292	; 0x292 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e0       	ldi	r30, 0x0A	; 10
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 37       	cpi	r26, 0x7C	; 124
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <main>
  9e:	0c 94 83 01 	jmp	0x306	; 0x306 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ApplicationMain>:
uint8_t before_pos[2] = {0, 0};


void ApplicationMain(void)
{
	PORTB |= (1 << PORTB5);
  a6:	2d 9a       	sbi	0x05, 5	; 5
	
	if(tick == 1)									// 인터럽트 동작하면
  a8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <tick>
  ac:	81 30       	cpi	r24, 0x01	; 1
  ae:	09 f0       	breq	.+2      	; 0xb2 <ApplicationMain+0xc>
  b0:	4d c0       	rjmp	.+154    	; 0x14c <ApplicationMain+0xa6>
	{
		tick = 0;									// 인터럽트 tick 초기화
  b2:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <tick>

		#ifdef FORWARD_OP
		//USART_Transmit_str("FORWARD MODE\n", _ASCII);
		if(pin2_flg == 1 && pin4_flg == 0)			// 최초 동작 방향 체크
  b6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <pin2_flg>
  ba:	81 30       	cpi	r24, 0x01	; 1
  bc:	41 f4       	brne	.+16     	; 0xce <ApplicationMain+0x28>
  be:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <pin4_flg>
  c2:	81 11       	cpse	r24, r1
  c4:	04 c0       	rjmp	.+8      	; 0xce <ApplicationMain+0x28>
		{
			state = FORWARD;
  c6:	8b e0       	ldi	r24, 0x0B	; 11
  c8:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <state>
  cc:	04 c0       	rjmp	.+8      	; 0xd6 <ApplicationMain+0x30>
		}
		
		if(state == FORWARD)
  ce:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <state>
  d2:	8b 30       	cpi	r24, 0x0B	; 11
  d4:	d9 f5       	brne	.+118    	; 0x14c <ApplicationMain+0xa6>
		{
			pos[0] = pin2_forward_flg;
  d6:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <pin2_forward_flg>
  da:	ea e0       	ldi	r30, 0x0A	; 10
  dc:	f1 e0       	ldi	r31, 0x01	; 1
  de:	80 83       	st	Z, r24
			pos[1] = pin4_forward_flg;
  e0:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <pin4_forward_flg>
  e4:	91 83       	std	Z+1, r25	; 0x01
			
			if(before_pos[0] == pos[0])
  e6:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__data_end>
  ea:	89 13       	cpse	r24, r25
  ec:	26 c0       	rjmp	.+76     	; 0x13a <ApplicationMain+0x94>
			{
				uint8_t check = 0;
				ex_cnt++;
  ee:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <ex_cnt>
  f2:	8f 5f       	subi	r24, 0xFF	; 255
				check = ex_cnt%2;
				if(check == 0)
  f4:	80 ff       	sbrs	r24, 0
  f6:	03 c0       	rjmp	.+6      	; 0xfe <ApplicationMain+0x58>
			pos[1] = pin4_forward_flg;
			
			if(before_pos[0] == pos[0])
			{
				uint8_t check = 0;
				ex_cnt++;
  f8:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <ex_cnt>
  fc:	14 c0       	rjmp	.+40     	; 0x126 <ApplicationMain+0x80>
				check = ex_cnt%2;
				if(check == 0)
				{
					ex_cnt = 0;
  fe:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <ex_cnt>
					count++;
 102:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <count>
 106:	8f 5f       	subi	r24, 0xFF	; 255
 108:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <count>
					USART_Transmit_char(0xEA);
 10c:	8a ee       	ldi	r24, 0xEA	; 234
 10e:	0e 94 08 01 	call	0x210	; 0x210 <USART_Transmit_char>
					USART_Transmit_char(count);
 112:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <count>
 116:	0e 94 08 01 	call	0x210	; 0x210 <USART_Transmit_char>
					USART_Transmit_char(0x33);
 11a:	83 e3       	ldi	r24, 0x33	; 51
 11c:	0e 94 08 01 	call	0x210	; 0x210 <USART_Transmit_char>
					USART_Transmit_char(0x5A);
 120:	8a e5       	ldi	r24, 0x5A	; 90
 122:	0e 94 08 01 	call	0x210	; 0x210 <USART_Transmit_char>
// 					USART_Transmit_str("\n------- cnt = ", _ASCII);
// 					translateChartoASCII(count);
// 					USART_Transmit_str(" -----------\n", _ASCII);
				}
				
				if(before_pos[1] == pos[1])
 126:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
 12a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <pos+0x1>
 12e:	98 13       	cpse	r25, r24
 130:	04 c0       	rjmp	.+8      	; 0x13a <ApplicationMain+0x94>
				{
					pin2_flg = 0;
 132:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <pin2_flg>
					pin4_flg = 0;
 136:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <pin4_flg>
				}
			}

			before_pos[0] = pos[0];
 13a:	e8 e0       	ldi	r30, 0x08	; 8
 13c:	f1 e0       	ldi	r31, 0x01	; 1
 13e:	aa e0       	ldi	r26, 0x0A	; 10
 140:	b1 e0       	ldi	r27, 0x01	; 1
 142:	8c 91       	ld	r24, X
 144:	80 83       	st	Z, r24
			before_pos[1] = pos[1];
 146:	11 96       	adiw	r26, 0x01	; 1
 148:	8c 91       	ld	r24, X
 14a:	81 83       	std	Z+1, r24	; 0x01
 14c:	08 95       	ret

0000014e <AppInit>:
	}
}

void AppInit(void)
{
	USART_Init(BAUD_9600);			// USART 9600 baudrate 설정
 14e:	87 e6       	ldi	r24, 0x67	; 103
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 fd 00 	call	0x1fa	; 0x1fa <USART_Init>
	PCINT_init();
 156:	0e 94 b6 00 	call	0x16c	; 0x16c <PCINT_init>
	DDRB = (1 << PORTB5);			// 확인용 LED
 15a:	80 e2       	ldi	r24, 0x20	; 32
 15c:	84 b9       	out	0x04, r24	; 4
	sei();
 15e:	78 94       	sei
	USART_Transmit_str("START\n", _ASCII);
 160:	6a e0       	ldi	r22, 0x0A	; 10
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	91 e0       	ldi	r25, 0x01	; 1
 166:	0e 94 2c 01 	call	0x258	; 0x258 <USART_Transmit_str>
 16a:	08 95       	ret

0000016c <PCINT_init>:
uint8_t state = 0;
uint8_t tick = 0;

void PCINT_init(void)
{
	DDRB &= ~((1 << PORTB0) | (1 << PORTB1) | (1 << PORTB2) | (1 << PORTB3));
 16c:	84 b1       	in	r24, 0x04	; 4
 16e:	80 7f       	andi	r24, 0xF0	; 240
 170:	84 b9       	out	0x04, r24	; 4
	PCICR = (1 << PCIE0);
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	PCMSK0 = (1 << PCINT0) | (1 << PCINT1) | (1 << PCINT2) | (1 << PCINT3);
 178:	8f e0       	ldi	r24, 0x0F	; 15
 17a:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
 17e:	08 95       	ret

00000180 <__vector_3>:
}

ISR(PCINT0_vect)
{
 180:	1f 92       	push	r1
 182:	0f 92       	push	r0
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	0f 92       	push	r0
 188:	11 24       	eor	r1, r1
 18a:	8f 93       	push	r24
	uint8_t input_check = PINB & 0x0F;
 18c:	83 b1       	in	r24, 0x03	; 3
	switch(input_check)
 18e:	8f 70       	andi	r24, 0x0F	; 15
 190:	84 30       	cpi	r24, 0x04	; 4
 192:	c9 f0       	breq	.+50     	; 0x1c6 <__vector_3+0x46>
 194:	88 30       	cpi	r24, 0x08	; 8
 196:	41 f1       	breq	.+80     	; 0x1e8 <__vector_3+0x68>
 198:	82 30       	cpi	r24, 0x02	; 2
 19a:	49 f5       	brne	.+82     	; 0x1ee <__vector_3+0x6e>
	{
		case 0x01:
			break;
		case 0x02:
			tick = 1;
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <tick>
			
			#ifdef FORWARD_OP
			if(state == FORWARD)
 1a2:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <state>
 1a6:	8b 30       	cpi	r24, 0x0B	; 11
 1a8:	31 f4       	brne	.+12     	; 0x1b6 <__vector_3+0x36>
			{
				pin2_forward_flg = 0;
 1aa:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <pin2_forward_flg>
				pin4_forward_flg = 1;
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <pin4_forward_flg>
 1b4:	1c c0       	rjmp	.+56     	; 0x1ee <__vector_3+0x6e>
			}
			else
			{
				pin2_flg = 1;
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <pin2_flg>
				pin2_forward_flg = 1;
 1bc:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <pin2_forward_flg>
				pin4_forward_flg = 0;
 1c0:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <pin4_forward_flg>
 1c4:	14 c0       	rjmp	.+40     	; 0x1ee <__vector_3+0x6e>
			#endif
			
			//USART_Transmit_str("F", _ASCII);
			break;
		case 0x04:
			tick = 1;
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <tick>
			
			#ifdef FORWARD_OP
			if(state == FORWARD)
 1cc:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <state>
 1d0:	8b 30       	cpi	r24, 0x0B	; 11
 1d2:	31 f4       	brne	.+12     	; 0x1e0 <__vector_3+0x60>
			{
				pin2_forward_flg = 1;
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <pin2_forward_flg>
				pin4_forward_flg = 0;
 1da:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <pin4_forward_flg>
 1de:	07 c0       	rjmp	.+14     	; 0x1ee <__vector_3+0x6e>
			}
			else
			{
				pin4_flg = 1;
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <pin4_flg>
 1e6:	03 c0       	rjmp	.+6      	; 0x1ee <__vector_3+0x6e>
			#endif
			
			//USART_Transmit_str("R", _ASCII);
			break;		
		case 0x08:
			pin8_flg = 1;
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <pin8_flg>
			break;		
	}
 1ee:	8f 91       	pop	r24
 1f0:	0f 90       	pop	r0
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	0f 90       	pop	r0
 1f6:	1f 90       	pop	r1
 1f8:	18 95       	reti

000001fa <USART_Init>:
			myString[i] = response;
			i++;
		}
	}
	myString[i] = 0;
}
 1fa:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 1fe:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 202:	88 e9       	ldi	r24, 0x98	; 152
 204:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 208:	8e e0       	ldi	r24, 0x0E	; 14
 20a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 20e:	08 95       	ret

00000210 <USART_Transmit_char>:
 210:	e0 ec       	ldi	r30, 0xC0	; 192
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	90 81       	ld	r25, Z
 216:	95 ff       	sbrs	r25, 5
 218:	fd cf       	rjmp	.-6      	; 0x214 <USART_Transmit_char+0x4>
 21a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 21e:	08 95       	ret

00000220 <nibbleToHexChar>:
 220:	8a 30       	cpi	r24, 0x0A	; 10
 222:	10 f4       	brcc	.+4      	; 0x228 <nibbleToHexChar+0x8>
 224:	80 5d       	subi	r24, 0xD0	; 208
 226:	08 95       	ret
 228:	89 5c       	subi	r24, 0xC9	; 201
 22a:	08 95       	ret

0000022c <translateChartoASCII>:
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	c8 2f       	mov	r28, r24
 232:	82 95       	swap	r24
 234:	8f 70       	andi	r24, 0x0F	; 15
 236:	0e 94 10 01 	call	0x220	; 0x220 <nibbleToHexChar>
 23a:	d8 2f       	mov	r29, r24
 23c:	8c 2f       	mov	r24, r28
 23e:	8f 70       	andi	r24, 0x0F	; 15
 240:	0e 94 10 01 	call	0x220	; 0x220 <nibbleToHexChar>
 244:	c8 2f       	mov	r28, r24
 246:	8d 2f       	mov	r24, r29
 248:	0e 94 08 01 	call	0x210	; 0x210 <USART_Transmit_char>
 24c:	8c 2f       	mov	r24, r28
 24e:	0e 94 08 01 	call	0x210	; 0x210 <USART_Transmit_char>
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	08 95       	ret

00000258 <USART_Transmit_str>:
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	ec 01       	movw	r28, r24
 25e:	6a 30       	cpi	r22, 0x0A	; 10
 260:	51 f4       	brne	.+20     	; 0x276 <USART_Transmit_str+0x1e>
 262:	88 81       	ld	r24, Y
 264:	88 23       	and	r24, r24
 266:	91 f0       	breq	.+36     	; 0x28c <USART_Transmit_str+0x34>
 268:	21 96       	adiw	r28, 0x01	; 1
 26a:	0e 94 08 01 	call	0x210	; 0x210 <USART_Transmit_char>
 26e:	89 91       	ld	r24, Y+
 270:	81 11       	cpse	r24, r1
 272:	fb cf       	rjmp	.-10     	; 0x26a <USART_Transmit_str+0x12>
 274:	0b c0       	rjmp	.+22     	; 0x28c <USART_Transmit_str+0x34>
 276:	6b 30       	cpi	r22, 0x0B	; 11
 278:	49 f4       	brne	.+18     	; 0x28c <USART_Transmit_str+0x34>
 27a:	88 81       	ld	r24, Y
 27c:	88 23       	and	r24, r24
 27e:	31 f0       	breq	.+12     	; 0x28c <USART_Transmit_str+0x34>
 280:	21 96       	adiw	r28, 0x01	; 1
 282:	0e 94 16 01 	call	0x22c	; 0x22c <translateChartoASCII>
 286:	89 91       	ld	r24, Y+
 288:	81 11       	cpse	r24, r1
 28a:	fb cf       	rjmp	.-10     	; 0x282 <USART_Transmit_str+0x2a>
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	08 95       	ret

00000292 <__vector_18>:
// 	while(!(UCSR0A & (1 << UDRE0)));
// 	UDR0 = data;
// }

ISR(USART_RX_vect)
{
 292:	1f 92       	push	r1
 294:	0f 92       	push	r0
 296:	0f b6       	in	r0, 0x3f	; 63
 298:	0f 92       	push	r0
 29a:	11 24       	eor	r1, r1
 29c:	8f 93       	push	r24
 29e:	9f 93       	push	r25
 2a0:	af 93       	push	r26
 2a2:	bf 93       	push	r27
 2a4:	ef 93       	push	r30
 2a6:	ff 93       	push	r31
	rx_data = UDR0;
 2a8:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2ac:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <rx_data>
	rx_buf[rx_cnt++] = rx_data;
 2b0:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <rx_cnt>
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	8e 0f       	add	r24, r30
 2b8:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <rx_cnt>
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	e9 5e       	subi	r30, 0xE9	; 233
 2c0:	fe 4f       	sbci	r31, 0xFE	; 254
 2c2:	90 83       	st	Z, r25
	if(rx_cnt == LENTH)
 2c4:	85 30       	cpi	r24, 0x05	; 5
 2c6:	79 f4       	brne	.+30     	; 0x2e6 <__vector_18+0x54>
	{
		memcpy(str, rx_buf, LENTH);
 2c8:	e7 e1       	ldi	r30, 0x17	; 23
 2ca:	f1 e0       	ldi	r31, 0x01	; 1
 2cc:	aa e4       	ldi	r26, 0x4A	; 74
 2ce:	b1 e0       	ldi	r27, 0x01	; 1
 2d0:	01 90       	ld	r0, Z+
 2d2:	0d 92       	st	X+, r0
 2d4:	8a 95       	dec	r24
 2d6:	e1 f7       	brne	.-8      	; 0x2d0 <__vector_18+0x3e>
		str[LENTH] = 0;
 2d8:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <str+0x5>
		rx_cnt = 0;
 2dc:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <rx_cnt>
		rx_flag = 1;
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <rx_flag>
	}
 2e6:	ff 91       	pop	r31
 2e8:	ef 91       	pop	r30
 2ea:	bf 91       	pop	r27
 2ec:	af 91       	pop	r26
 2ee:	9f 91       	pop	r25
 2f0:	8f 91       	pop	r24
 2f2:	0f 90       	pop	r0
 2f4:	0f be       	out	0x3f, r0	; 63
 2f6:	0f 90       	pop	r0
 2f8:	1f 90       	pop	r1
 2fa:	18 95       	reti

000002fc <main>:

#include "common.h"

int main(void)
{
	AppInit();
 2fc:	0e 94 a7 00 	call	0x14e	; 0x14e <AppInit>
    while (1) 
    {
		ApplicationMain();
 300:	0e 94 53 00 	call	0xa6	; 0xa6 <ApplicationMain>
 304:	fd cf       	rjmp	.-6      	; 0x300 <main+0x4>

00000306 <_exit>:
 306:	f8 94       	cli

00000308 <__stop_program>:
 308:	ff cf       	rjmp	.-2      	; 0x308 <__stop_program>
